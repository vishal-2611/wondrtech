{"version":3,"sources":["Apis/index.js","Components/AdvanceBar.js","Utils/Download.js","Components/index.js","Components/CustomInfiniteScroll.js","Utils/LocalStorage.js","Containers/index.js","Utils/App.js","serviceWorker.js","index.js"],"names":["photoList","pageNumber","numberOfImage","Axios","get","then","res","data","catch","error","console","log","AdvanceBar","this","props","toggleImageType","imageType","setInputValues","downloadUrl","shareUrl","Row","Col","Button","onClick","variant","className","InputGroup","Prepend","Text","FormControl","placeholder","type","min","max","onChange","name","absoluteUrl","link","document","createElement","href","download","body","appendChild","click","removeChild","downloadFile","disabled","value","Append","Component","CustomModal","state","blur","height","width","bind","setState","prevState","e","target","Number","isVisible","setModalVisible","selectedImage","url","id","Modal","size","show","onHide","aria-labelledby","Header","closeButton","Title","author","Body","src","alt","CustomInfiniteScroll","photoListData","fetchMoreData","toggleModal","dataLength","length","next","hasMore","loader","map","index","md","key","setLocalStorage","localStorage","setItem","getLocalStorage","getItem","PhotoList","listenToScroll","window","pageYOffset","currentPage","addEventListener","pageOffSet","scrollTo","visible","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4ad661ef.chunk.js","sourcesContent":["import Axios from \"axios\";\n\nexport function photoList(pageNumber, numberOfImage) {\n  return Axios.get(\n    `https://picsum.photos/v2/list?page=${pageNumber}&limit=${numberOfImage}`\n  )\n    .then((res) => {\n      return res.data;\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Button, InputGroup, FormControl } from \"react-bootstrap\";\nimport { downloadFile } from \"../Utils/Download\";\n\nexport class AdvanceBar extends Component {\n  render() {\n    const {\n      toggleImageType,\n      imageType,\n      setInputValues,\n      downloadUrl,\n      shareUrl,\n    } = this.props;\n\n    return (\n      <>\n        <Row>\n          <Col>\n            <Button\n              onClick={toggleImageType}\n              variant=\"outline-secondary\"\n              className=\"float-right\"\n            >\n              {imageType ? \"GrayScale\" : \"Coloured\"}\n            </Button>\n          </Col>\n          <Col>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>Blur</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"Blur Level 1-10\"\n                type=\"number\"\n                min=\"0\"\n                max=\"10\"\n                onChange={setInputValues}\n                name=\"blur\"\n              />\n            </InputGroup>\n          </Col>\n          <Col>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>Width</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"Width\"\n                type=\"number\"\n                min=\"1\"\n                onChange={setInputValues}\n                name=\"width\"\n              />\n            </InputGroup>\n          </Col>\n          <Col>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>Height</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"Height\"\n                type=\"number\"\n                min=\"1\"\n                onChange={setInputValues}\n                name=\"height\"\n              />\n            </InputGroup>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => downloadFile(downloadUrl)}\n              variant=\"outline-primary\"\n              className=\"float-right\"\n            >\n              Download Image\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>Shareable Link</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"Shareable Link\"\n                type=\"text\"\n                disabled\n                value={shareUrl}\n              />\n              <InputGroup.Append>\n                <Button variant=\"outline-success\">Share</Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default AdvanceBar;\n","export function downloadFile(absoluteUrl) {\n  let link = document.createElement(\"a\");\n  link.href = absoluteUrl;\n  link.download = \"true\";\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  link = null;\n}\n","import React, { Component } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport AdvanceBar from \"./AdvanceBar\";\nexport class CustomModal extends Component {\n  constructor() {\n    super();\n    this.state = { imageType: false, blur: 0, height: 500, width: 400 };\n    this.toggleImageType = this.toggleImageType.bind(this);\n    this.setInputValues = this.setInputValues.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ imageType: this.props.imageType });\n  }\n\n  toggleImageType() {\n    this.setState((prevState) => {\n      return { imageType: !prevState.imageType };\n    });\n  }\n  setInputValues(e) {\n    this.setState({ [e.target.name]: Number(e.target.value) });\n  }\n  render() {\n    const { isVisible, setModalVisible, selectedImage } = this.props;\n    const { imageType, blur, height, width } = this.state;\n\n    let url = `https://picsum.photos/id/${\n      selectedImage.id\n    }/${width}/${height}?${imageType ? \"\" : `grayscale`}${\n      blur > 0 ? `&blur=${blur}` : \"\"\n    }\n    `;\n    let downloadUrl = `https://i.picsum.photos/id/${\n      selectedImage.id\n    }/${width}/${height}.jpg?${imageType ? \"\" : `grayscale`}${\n      blur > 0 ? `&blur=${blur}` : \"\"\n    }`;\n\n    return (\n      <Modal\n        size=\"xl\"\n        show={isVisible}\n        onHide={() => setModalVisible(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\n            {selectedImage.author}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <AdvanceBar\n            imageType={imageType}\n            toggleImageType={this.toggleImageType}\n            setInputValues={this.setInputValues}\n            downloadUrl={downloadUrl}\n            shareUrl={url}\n          />\n          <img src={url} alt={selectedImage.id} className=\"photo-gallery\" />\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n","import React from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Col, Row } from \"react-bootstrap\";\n\nfunction CustomInfiniteScroll({\n  photoListData,\n  imageType,\n  fetchMoreData,\n  toggleModal,\n}) {\n  return (\n    <InfiniteScroll\n      dataLength={photoListData.length}\n      next={fetchMoreData}\n      hasMore={true}\n      loader={<h4 className=\"text-center\">Loading...</h4>}\n    >\n      <Row>\n        {photoListData.map((res, index) => (\n          <Col\n            md=\"2\"\n            className=\"d-flex flex-column align-items-center\"\n            onClick={() => toggleModal(res)}\n            key={index}\n          >\n            <img\n              src={`https://picsum.photos/id/${res.id}/250/400?${\n                imageType ? \"\" : \"grayscale\"\n              }`}\n              height=\"300\"\n              width=\"250\"\n              alt={res.id}\n              className=\"photo-gallery\"\n            />\n            <h5>{res.author}</h5>\n          </Col>\n        ))}\n      </Row>\n    </InfiniteScroll>\n  );\n}\nexport default CustomInfiniteScroll;\n","export function setLocalStorage(key, value) {\n  localStorage.setItem(key, value);\n}\n\nexport function getLocalStorage(key) {\n  return localStorage.getItem(key);\n}\n","import React, { Component } from \"react\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport { photoList } from \"../Apis\";\nimport { CustomModal } from \"../Components\";\nimport \"./index.css\";\nimport CustomInfiniteScroll from \"../Components/CustomInfiniteScroll\";\nimport { getLocalStorage, setLocalStorage } from \"../Utils/LocalStorage\";\n\nexport class PhotoList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      photoListData: [],\n      isVisible: false,\n      imageType: true,\n      selectedImage: {},\n      currentPage: 2,\n    };\n    this.toggleImageType = this.toggleImageType.bind(this);\n    this.setModalVisible = this.setModalVisible.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.fetchMoreData = this.fetchMoreData.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.listenToScroll);\n    const currentPage = getLocalStorage(\"currentPage\");\n    const pageOffSet = getLocalStorage(\"pageOffSet\");\n    debugger;\n    if (Number(currentPage) >= 2) {\n      const items = 30 + 10 * Number(currentPage);\n      photoList(1, items).then((res) => {\n        this.setState({ photoListData: res });\n        window.scrollTo(0, Number(pageOffSet));\n      });\n    } else {\n      photoList(1, 30).then((res) => this.setState({ photoListData: res }));\n    }\n    const imageType = getLocalStorage(\"imageType\");\n    if (imageType === \"true\") this.setState({ imageType: false });\n    else this.setState({ imageType: true });\n  }\n\n  toggleImageType() {\n    this.setState((prevState) => {\n      return { imageType: !prevState.imageType };\n    });\n    setLocalStorage(\"imageType\", this.state.imageType);\n  }\n\n  setModalVisible(visible) {\n    this.setState({ isVisible: visible });\n  }\n\n  toggleModal(selectedImage) {\n    this.setState({ isVisible: true, selectedImage });\n  }\n\n  fetchMoreData() {\n    const { currentPage } = this.state;\n    photoList(currentPage, 10).then((res) =>\n      this.setState(\n        (prevState) => {\n          return {\n            photoListData: [...prevState.photoListData, ...res],\n            currentPage: prevState.currentPage + 1,\n          };\n        },\n        () => {\n          setLocalStorage(\"currentPage\", this.state.currentPage);\n        }\n      )\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.listenToScroll);\n  }\n\n  listenToScroll = () => {\n    setLocalStorage(\"pageOffSet\", window.pageYOffset);\n  };\n\n  render() {\n    const { photoListData, imageType, isVisible, selectedImage } = this.state;\n    return (\n      <>\n        <section>\n          <Button\n            onClick={this.toggleImageType}\n            variant=\"primary\"\n            className=\"float-right m-2\"\n          >\n            {imageType ? \"GrayScale\" : \"Coloured\"}\n          </Button>\n          <div className=\"clearfix\" />\n\n          <CustomInfiniteScroll\n            photoListData={photoListData}\n            imageType={imageType}\n            fetchMoreData={this.fetchMoreData}\n            toggleModal={this.toggleModal}\n          />\n        </section>\n        {isVisible && (\n          <CustomModal\n            isVisible={isVisible}\n            setModalVisible={this.setModalVisible}\n            selectedImage={selectedImage}\n            imageType={imageType}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default PhotoList;\n","import React from \"react\";\nimport PhotoList from \"../Containers\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nfunction App() {\n  return (\n    <div>\n      <header>\n        <h1>WondrTech Photo App Assignment</h1>\n      </header>\n      <PhotoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Utils/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}